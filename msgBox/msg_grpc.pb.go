// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: msg.proto

package msgBox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageBox_UniMsg_FullMethodName = "/msgBox.MessageBox/UniMsg"
)

// MessageBoxClient is the client API for MessageBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBoxClient interface {
	UniMsg(ctx context.Context, in *MsgBody, opts ...grpc.CallOption) (*MsgBody, error)
}

type messageBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBoxClient(cc grpc.ClientConnInterface) MessageBoxClient {
	return &messageBoxClient{cc}
}

func (c *messageBoxClient) UniMsg(ctx context.Context, in *MsgBody, opts ...grpc.CallOption) (*MsgBody, error) {
	out := new(MsgBody)
	err := c.cc.Invoke(ctx, MessageBox_UniMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageBoxServer is the server API for MessageBox service.
// All implementations must embed UnimplementedMessageBoxServer
// for forward compatibility
type MessageBoxServer interface {
	UniMsg(context.Context, *MsgBody) (*MsgBody, error)
	mustEmbedUnimplementedMessageBoxServer()
}

// UnimplementedMessageBoxServer must be embedded to have forward compatible implementations.
type UnimplementedMessageBoxServer struct {
}

func (UnimplementedMessageBoxServer) UniMsg(context.Context, *MsgBody) (*MsgBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniMsg not implemented")
}
func (UnimplementedMessageBoxServer) mustEmbedUnimplementedMessageBoxServer() {}

// UnsafeMessageBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageBoxServer will
// result in compilation errors.
type UnsafeMessageBoxServer interface {
	mustEmbedUnimplementedMessageBoxServer()
}

func RegisterMessageBoxServer(s grpc.ServiceRegistrar, srv MessageBoxServer) {
	s.RegisterService(&MessageBox_ServiceDesc, srv)
}

func _MessageBox_UniMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBoxServer).UniMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageBox_UniMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBoxServer).UniMsg(ctx, req.(*MsgBody))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageBox_ServiceDesc is the grpc.ServiceDesc for MessageBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msgBox.MessageBox",
	HandlerType: (*MessageBoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UniMsg",
			Handler:    _MessageBox_UniMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
